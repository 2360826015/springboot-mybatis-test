<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liuwohe.repository.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.liuwohe.entity.Employee">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="org_id" jdbcType="VARCHAR" property="orgId" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="e_name" jdbcType="VARCHAR" property="name" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="salary" jdbcType="DOUBLE" property="salary" />
    <association property="organization" column="org" javaType="com.liuwohe.entity.Organization">
      <id column="id" jdbcType="INTEGER" property="id" />
      <result column="org_name" jdbcType="VARCHAR" property="text" />
      <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    </association>
  </resultMap>
  <sql id="Base_Column_List">
    id, org_id, sex, birthday, e_name, age,salary
  </sql>
  <select id="getOne" resultType="com.liuwohe.entity.Employee">
    select emp.e_name,emp.sex,emp.birthday,emp.age,org.org_name ,org.parent_id from employee emp  join organization org on emp.org_id=org.id and org.id=1
  </select>
  <select id="getAll" resultMap="BaseResultMap">
    select emp.id, emp.org_id, emp.e_name,emp.sex,emp.birthday,emp.age,emp.salary,org.org_name ,org.parent_id
    from employee emp left join organization org
    on emp.org_id=org.id
  </select>
  <select id="getChooseed" parameterType="com.liuwohe.entity.Select" resultMap="BaseResultMap">
    select emp.id, emp.e_name,emp.sex,emp.birthday,emp.age,emp.salary,emp.org_id,org.org_name ,org.parent_id
    from employee emp join organization org
    <where> emp.org_id=org.id
    <if test="orgName !=null and orgName !=''">
     and (emp.org_id=#{orgName} or org.parent_id=#{orgName})
    </if>
    <if test="sex !=null and sex !=''">
     and emp.sex=#{sex}
    </if>
    <if test="birthday !=null">
      and emp.birthday=#{birthday}
    </if>
    </where>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employee
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.liuwohe.entity.Employee">
    insert into employee (id, org_id, sex, 
      birthday, e_name, age,salary)
    values (#{id,jdbcType=INTEGER}, #{orgId,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR},
      #{birthday,jdbcType=DATE}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{salary,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.liuwohe.entity.Employee">
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orgId != null">
        org_id,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="name != null">
        e_name,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="salary != null">
        salary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orgId != null">
        #{orgId,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.liuwohe.entity.Employee">
    update employee
    <set>
      <if test="orgId != null">
        org_id = #{orgId,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="name != null">
        e_name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liuwohe.entity.Employee">
    update employee
    set org_id = #{orgId,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      e_name = #{name,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      salary = #{salary,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>